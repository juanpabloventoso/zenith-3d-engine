



      
     


    class Tz3DPhysicsEngine : public Tz3DLinked,Iz3DPhysicsEngine
{
public:

  private:
      Boolean FEnabled; 

      Double FLastPhysicsTime; 

  protected:
      
Boolean GetEnabled ();
 ;
       
SetEnabled (const Boolean Value 
);
 ;
         
Init (const Iz3DBase AOwner = nil 
);
 ; ;
     
z3DFrameMove ();
 ; ;

     
SyncronizeScenarioPhysics ();
 ;
       
PerformWorldsPhysics (const Iz3DScenarioDynamicObject AObject 
);
 ;
        
Boolean PerformCollisionPhysics (const Iz3DScenarioDynamicObject AObject 
);
 ;
       
ApplyPhysics (const Iz3DScenarioDynamicObject AObject 
);
 ;

                
Boolean CheckCollision (const Iz3DScenarioDynamicObject AObjectA ,
const Iz3DScenarioObject AObjectB 
);
 ;
                
Boolean BoundIntersectionTest (const Iz3DScenarioDynamicObject AObjectA ,
const Iz3DScenarioObject AObjectB 
);
 ;

                
Boolean BSvsBSCollisionTest (const Iz3DScenarioDynamicObject AObjectA ,
const Iz3DScenarioObject AObjectB 
);
 ;
                
Boolean AABBvsAABBCollisionTest (const Iz3DScenarioDynamicObject AObjectA ,
const Iz3DScenarioObject AObjectB 
);
 ;

                
Boolean TriangleCollisionTest (const Iz3DScenarioDynamicObject AObjectA ,
const Iz3DScenarioObject AObjectB 
);
 ;
             
Boolean TriangleIntersects (const Iz3DFloat3 A1 ,
const Iz3DFloat3 A2 ,
const Iz3DFloat3 A3 ,
const Iz3DFloat3 B1 ,
const Iz3DFloat3 B2 ,
const Iz3DFloat3 B3 
);
 ;

                
Boolean BSvsBSCollisionResponse (const Iz3DScenarioDynamicObject AObjectA ,
const Iz3DScenarioObject AObjectB 
);
 ;
  public:
         
Tz3DPhysicsEngine (const Iz3DBase AOwner = nil 
);
 ;
  public:
         /** \sa GetEnabled For reading   \sa SetEnabled For writing */
Boolean Enabled; 

 };



  const Single GFrameTime; 

      typedef array<Iz3DSound> GCollisionSounds;
     const Double GLastPlayTime; 



   const  MIN_VELOCITY_Y =  0.05;
   const  POSITION_BIAS =  0.00001;


  
Iz3DPhysicsEngine z3DCreatePhyicsEngine ();
 ;
  
Iz3DPhysicsEngine z3DPhysicsEngine ();
 ;
   
z3DSetCustomPhysicsEngine (const Iz3DPhysicsEngine AEngine 
);
 ;



     
     
/*
var
 GEngine: Iz3DPhysicsEngine;

  
Iz3DPhysicsEngine z3DCreatePhyicsEngine ()
 ;{
#ifndef DOXYGEN_SKIP
  GEngine:= Tz3DPhysicsEngine.Create;
  Result:= GEngine;
#endif /* DOXYGEN_SKIP */
};

  
Iz3DPhysicsEngine z3DPhysicsEngine ()
 ;{
#ifndef DOXYGEN_SKIP
  Result:= GEngine;
#endif /* DOXYGEN_SKIP */
};

   
z3DSetCustomPhysicsEngine (const Iz3DPhysicsEngine AEngine 
)
 ;{
#ifndef DOXYGEN_SKIP
  GEngine:= AEngine;
#endif /* DOXYGEN_SKIP */
};







                    
Boolean z3DBBCollisionTest (const Single APos1 ,
const Single APos2 ,
const Single AOffset1 ,
const Single AOffset2 ,
const Single AVel1 ,
const Iz3DPlane ANormalPlane1 ,
const Iz3DPlane ANormalPlane2 ,
const Boolean AUpper ,
/* out */ Single &ALength 
)

/*
//const
 FSign: array[Boolean] of Integer = (-1, 1);
*/
{
#ifndef DOXYGEN_SKIP

  // Measure the distance between the bodies
  ALength:= APos2 + AOffset2 * FSign[AUpper] - APos1;

  // The collision happens if the distance is less than the segment of the object 1
  // and it's normal plane intersects with the normal plane of the object 2
  Result:= ((Sign(ALength) = AVel1) or (Sign(AVel1) = 0)) and (Abs(ALength) <= AOffset1) and
    ANormalPlane1.Intersects(ANormalPlane2);
#endif /* DOXYGEN_SKIP */
};

                               
z3DBBCollisionResponse (const Iz3DScenarioObject iObject1 ,
const Iz3DScenarioObject iObject2 ,
const Single APos1 ,
const Single APos2 ,
const Single AOffset1 ,
const Single AOffset2 ,
const Single AVel1P ,
const Single AVel2P ,
const Iz3DFloat2 AVel1N ,
const Boolean AUpper ,
const Single ALength ,
/* out */ Single &APos ,
/* out */ Single &AVelocity1P ,
/* out */ Single &AVelocity2P ,
const Iz3DFloat2 AVelocityN 
)

/*
//const
 FSign: array[Boolean] of Integer = (-1, 1);
*/
{
#ifndef DOXYGEN_SKIP

  // Return the object into the collision position
  APos:= APos2 + AOffset2 * FSign[AUpper] - (AOffset1 + POSITION_BIAS) * Sign(ALength);

  // Apply the force to both objects
  AVelocity1P:= -AVel1P * iObject1.Subsets[0].Material.Elasticity;
  AVelocity2P:= (AVel1P + AVel2P) * iObject2.Subsets[0].Material.Elasticity;

  // Apply the friction
  AVelocityN.X:= AVel1N.X - (AVel1N.X * iObject1.Subsets[0].Material.Roughness * GFrameTime);
  AVelocityN.Y:= AVel1N.Y - (AVel1N.Y * iObject1.Subsets[0].Material.Roughness * GFrameTime);
#endif /* DOXYGEN_SKIP */
};

/* Tz3DPhysicsEngine */ 

   
Tz3DPhysicsEngine::Tz3DPhysicsEngine (const Iz3DBase AOwner 
)
{
#ifndef DOXYGEN_SKIP
  inherited;
  Notifications:= [z3dlnFrameMove];
#endif /* DOXYGEN_SKIP */
};

  
Boolean Tz3DPhysicsEngine::GetEnabled ()
{
#ifndef DOXYGEN_SKIP
  Result:= FEnabled;
#endif /* DOXYGEN_SKIP */
};

   
Tz3DPhysicsEngine::Init (const Iz3DBase AOwner 
)
{
#ifndef DOXYGEN_SKIP
  inherited;
  FEnabled:= True;
#endif /* DOXYGEN_SKIP */
};

   
Tz3DPhysicsEngine::SetEnabled (const Boolean Value 
)
{
#ifndef DOXYGEN_SKIP
  FEnabled:= Value;
#endif /* DOXYGEN_SKIP */
};

 
Tz3DPhysicsEngine::z3DFrameMove ()
{
#ifndef DOXYGEN_SKIP
  inherited;
  if FEnabled and z3DGlobalScenario.Enabled then
  SyncronizeScenarioPhysics;
#endif /* DOXYGEN_SKIP */
};

 
Tz3DPhysicsEngine::SyncronizeScenarioPhysics ()

/*
var
 I: Integer;
    FTime, FTimeLeft: Single;
    FNewPhysicsTime: Double;
*/
{
#ifndef DOXYGEN_SKIP

  inherited;
  if not z3DGlobalScenario.Enabled or z3DGlobalEngine.Desktop.Visible then Exit;
  GFrameTime:= z3DCore_GetElapsedTime;
  FTimeLeft:= GFrameTime;
  FTime:= FLastPhysicsTime;
  while FTimeLeft > 0 dobegin    GFrameTime:= min(FTimeLeft, Max(0.005, FTime));
    FTimeLeft:= FTimeLeft - GFrameTime;
    FLastPhysicsTime:= GetTickCount;

    // Iterate through all dynamic objects and apply physics to them
    for I:= 0 to z3DGlobalScenario.EntityCount-1 do
    if not z3DSupports(z3DGlobalScenario.Entities[I], Iz3DFirstPersonCamera) and
    z3DSupports(z3DGlobalScenario.Entities[I], Iz3DScenarioObject) and
    (z3DGlobalScenario.Entities[I] as Iz3DScenarioObject).EnablePhysics then
    ApplyPhysics(z3DGlobalScenario.Entities[I] as Iz3DScenarioObject);

    FNewPhysicsTime:= GetTickCount;
    FLastPhysicsTime:= (FNewPhysicsTime - FLastPhysicsTime + 10) * 0.001;
 end
#endif /* DOXYGEN_SKIP */
};

    
Boolean Tz3DPhysicsEngine::PerformCollisionPhysics (const Iz3DScenarioDynamicObject AObject 
)

/*
//const
 FEpsilon = 0.0001;
var I, FSound: Integer;
    FVelocity: Iz3DFloat3;
    FVelY: Single;
    FCollision, FGrounded, FPreviousGround: Boolean;
*/
{
#ifndef DOXYGEN_SKIP

  FPreviousGround:= AObject.Ground;
  FCollision:= False;
  FVelY:= Abs(AObject.Velocity.Y) / 5;

  // Compute collision with dynamic objects
  for I:= (AObject as Iz3DScenarioEntity).Index+1 to z3DGlobalScenario.EntityCount-1 dobegin    if z3DSupports(z3DGlobalScenario.Entities[I], Iz3DScenarioObject) and
    CheckCollision(AObject, z3DGlobalScenario.Entities[I] as Iz3DScenarioObject) then
    FCollision:= True;
 end

  // Compute collision with other objects
  for I:= 0 to z3DGlobalScenario.EntityCount-1 do
  if (z3DGlobalScenario.Entities[I].Index <> (AObject as Iz3DScenarioEntity).Index) thenbegin    if z3DSupports(z3DGlobalScenario.Entities[I], Iz3DScenarioStaticObject) and
    CheckCollision(AObject, z3DGlobalScenario.Entities[I] as Iz3DScenarioObject) then
    FCollision:= True;
 end

  if not FCollision then AObject.Ground:= False;
  Result:= FCollision;
  // Play collision sound
/*  if not FPreviousGround and (Length(GCollisionSounds) > 0) and Assigned(GCollisionSounds[0]) and
  (z3DCore_GetTime-GLastPlayTime > 0.05) then
  begin
    FSound:= Random(Length(GCollisionSounds));
    GCollisionSounds[FSound].Stop;
    GCollisionSounds[FSound].Play(0, 0, Trunc((5 - Min(5, FVelY)) * Min(AObject.ViewCenter.Length, 50) * -100), -1,
    Round(z3DFloat4.From(AObject.ViewCenter).Normalize.X * 1000));
    GLastPlayTime:= z3DCore_GetTime;
  end;*/ 

#endif /* DOXYGEN_SKIP */
};

   
Tz3DPhysicsEngine::PerformWorldsPhysics (const Iz3DScenarioDynamicObject AObject 
)

/*
var
 I: Integer;
*/
{
#ifndef DOXYGEN_SKIP

  for I:= 0 to z3DGlobalScenario.WorldCount-1 do
  if z3DGlobalScenario.Worlds[I].IndexOf(AObject as Iz3DScenarioEntity) <> -1 thenbegin
    // Add the gravity acceleration
    if not AObject.Ground then
    AObject.Acceleration.Y:= AObject.Acceleration.Y - z3DGlobalScenario.Worlds[I].Gravity;

    // Add the wind force
    AObject.Acceleration.Add(z3DFloat3.From(z3DGlobalScenario.Worlds[I].WindSpeed).Scale(
    Saturate(z3DGlobalScenario.Worlds[I].WindSpeed.Length - AObject.BoundingBox.Dimensions.Length * 8) *
    (1 - AObject.Subsets[0].Material.Roughness)));
 end
#endif /* DOXYGEN_SKIP */
};

   
Tz3DPhysicsEngine::ApplyPhysics (const Iz3DScenarioDynamicObject AObject 
)
{
#ifndef DOXYGEN_SKIP

  // Perform all physics calculations
  PerformCollisionPhysics(AObject);
  PerformWorldsPhysics(AObject);

  // Apply the acceleration to velocity and velocity to the final position
  if AObject.Ground then
  AObject.Acceleration.Y:= Max(AObject.Acceleration.Y, 0);
  AObject.Acceleration.Scale(GFrameTime);
  AObject.Velocity.Add(AObject.Acceleration);
  AObject.Center.Add(z3DFloat3.From(AObject.Velocity).Scale(GFrameTime));

  // Restore the current acceleration
  AObject.Acceleration.Identity;
#endif /* DOXYGEN_SKIP */
};

        
Boolean Tz3DPhysicsEngine::BoundIntersectionTest (const Iz3DScenarioDynamicObject AObjectA ,
const Iz3DScenarioObject AObjectB 
)
{
#ifndef DOXYGEN_SKIP

  // Test the bounding volumes for intersection (no intersection, no collision)

  // BoundingSphere vs BoundingSphere test
  if (AObjectA.Shape = z3dsosSphere) and (AObjectB.Shape = z3dsosSphere) then
  Result:= AObjectA.BoundingSphere.Intersects(AObjectB.BoundingSphere) and
  BSvsBSCollisionTest(AObjectA, AObjectB) else

  // BoundingBox vs BoundingBox test
  if (AObjectA.Shape = z3dsosCube) and (AObjectB.Shape = z3dsosCube) then
  Result:= AObjectA.BoundingBox.Intersects(AObjectB.BoundingBox) and
  AABBvsAABBCollisionTest(AObjectA, AObjectB) else

  // BoundingSphere vs BoundingBox or viceversa testbegin    if (AObjectA.Shape = z3dsosSphere) then
    Result:= AObjectA.BoundingSphere.Intersects(AObjectB.BoundingBox) else
    Result:= AObjectA.BoundingBox.Intersects(AObjectB.BoundingSphere);
    Result:= Result and AABBvsAABBCollisionTest(AObjectA, AObjectB);
 end
#endif /* DOXYGEN_SKIP */
};

        
Boolean Tz3DPhysicsEngine::CheckCollision (const Iz3DScenarioDynamicObject AObjectA ,
const Iz3DScenarioObject AObjectB 
)
{
#ifndef DOXYGEN_SKIP

  // Test the bounding volumes. If an intersection is detected a collision
  // may exist
  Result:= BoundIntersectionTest(AObjectA, AObjectB) and
  TriangleCollisionTest(AObjectA, AObjectB);

  // If the object collided, apply the response
//  if Result then ApplyCollisionResponse(AObjectA, AObjectB);
#endif /* DOXYGEN_SKIP */
};

        
Boolean Tz3DPhysicsEngine::AABBvsAABBCollisionTest (const Iz3DScenarioDynamicObject AObjectA ,
const Iz3DScenarioObject AObjectB 
)

/*
var
 FLength: Single;
    FDynObject2: Iz3DScenarioDynamicObject;
    FOffset1, FOffset2: Iz3DFloat3;
    FCenter1: Iz3DFloat3;
    FVelocity1, FVelocity2: Iz3DFloat3;
    FVel1P, FVel2P, FPos: Single;
    FVelN: Iz3DFloat2;
    I: Integer;
*/
{
#ifndef DOXYGEN_SKIP

  Result:= False;

  FVelocity1:= z3DFloat3.From(AObjectA.Velocity);
  FVelocity2:= z3DFloat3;
  AObjectB.QueryInterface(Iz3DScenarioObject, FDynObject2);
  if FDynObject2 <> nil then FVelocity2.From(FDynObject2.Velocity);
  FOffset1:= z3DFloat3.From(AObjectA.BoundingBox.Dimensions).Scale(0.5);
  FOffset2:= z3DFloat3.From(AObjectB.BoundingBox.Dimensions).Scale(0.5);
  FCenter1:= z3DFloat3.From(AObjectA.Center);
  FVelN:= z3DFloat2;

  // 0: Lower collision | 1: Upper collision
  for I:= 0 to 1 dobegin
    // X-axis collision
    if z3DBBCollisionTest(AObjectA.Center.X, AObjectB.Center.X, FOffset1.X, FOffset2.X,
    Sign(FVelocity1.X),
    z3DPlane(AObjectA.Center.Y-FOffset1.Y, AObjectA.Center.Z-FOffset1.Z,
    AObjectA.Center.Y+FOffset1.Y, AObjectA.Center.Z+FOffset1.Z),
    z3DPlane(AObjectB.Center.Y-FOffset2.Y, AObjectB.Center.Z-FOffset2.Z,
    AObjectB.Center.Y+FOffset2.Y, AObjectB.Center.Z+FOffset2.Z), I = 1, FLength) thenbegin      Result:= True;
      z3DBBCollisionResponse(AObjectA, AObjectB, AObjectA.Center.X, AObjectB.Center.X, FOffset1.X,
      FOffset2.X, FVelocity1.X, FVelocity2.X, z3DFloat2(FVelocity1.Y, FVelocity1.Z),
      I = 1, FLength, FPos, FVel1P, FVel2P, FVelN);
      FCenter1.X:= FPos;
      FVelocity1.X:= FVel1P;
      FVelocity2.X:= FVel2P;
      FVelocity1.YZ:= FVelN.XY;
      AObjectA.Center.From(FCenter1);
      AObjectA.Velocity.From(FVelocity1);
      if FDynObject2 <> nil then FDynObject2.Velocity.From(FVelocity2);
   end

    // Y-axis collision
    if z3DBBCollisionTest(AObjectA.Center.Y, AObjectB.Center.Y, FOffset1.Y, FOffset2.Y,
    Sign(FVelocity1.Y),
    z3DPlane(AObjectA.Center.X-FOffset1.X, AObjectA.Center.Z-FOffset1.Z,
    AObjectA.Center.X+FOffset1.X, AObjectA.Center.Z+FOffset1.Z),
    z3DPlane(AObjectB.Center.X-FOffset2.X, AObjectB.Center.Z-FOffset2.Z,
    AObjectB.Center.X+FOffset2.X, AObjectB.Center.Z+FOffset2.Z), I = 1, FLength) thenbegin      Result:= True;
      z3DBBCollisionResponse(AObjectA, AObjectB, AObjectA.Center.Y, AObjectB.Center.Y, FOffset1.Y,
      FOffset2.Y, FVelocity1.Y, FVelocity2.Y, z3DFloat2(FVelocity1.X, FVelocity1.Z),
      I = 1, FLength, FPos, FVel1P, FVel2P, FVelN);
      FCenter1.Y:= FPos;
      FVelocity1.Y:= FVel1P;
      FVelocity1.XZ:= FVelN.XY;
      AObjectA.Ground:= True;
      AObjectA.Center.From(FCenter1);
      AObjectA.Velocity.From(FVelocity1);
      if AObjectA.Ground and (AObjectA.Velocity.Y < MIN_VELOCITY_Y) thenbegin        AObjectA.Velocity.BeginInternalChange;
        AObjectA.Velocity.Y:= 0;
        AObjectA.Velocity.EndInternalChange;
        AObjectA.Ground:= True;
     endelse AObjectA.Ground:= False 
      if FDynObject2 <> nil then FDynObject2.Velocity.From(FVelocity2);
      if (FDynObject2 <> nil) and (Abs(FDynObject2.Velocity.Y) < MIN_VELOCITY_Y) then FDynObject2.Ground:= True;
   end

    // Z-axis collision
    if z3DBBCollisionTest(AObjectA.Center.Z, AObjectB.Center.Z, FOffset1.Z, FOffset2.Z,
    Sign(FVelocity1.Z),
    z3DPlane(AObjectA.Center.X-FOffset1.X, AObjectA.Center.Y-FOffset1.Y,
    AObjectA.Center.X+FOffset1.X, AObjectA.Center.Y+FOffset1.Y),
    z3DPlane(AObjectB.Center.X-FOffset2.X, AObjectB.Center.Y-FOffset2.Y,
    AObjectB.Center.X+FOffset2.X, AObjectB.Center.Y+FOffset2.Y), I = 1, FLength) thenbegin      Result:= True;
      z3DBBCollisionResponse(AObjectA, AObjectB, AObjectA.Center.Z, AObjectB.Center.Z, FOffset1.Z,
      FOffset2.Z, FVelocity1.Z, FVelocity2.Z, z3DFloat2(FVelocity1.X, FVelocity1.Y),
      I = 1, FLength, FPos, FVel1P, FVel2P, FVelN);
      FCenter1.Z:= FPos;
      FVelocity1.Z:= FVel1P;
      FVelocity2.Z:= FVel2P;
      FVelocity1.XY:= FVelN.XY;
      AObjectA.Center.From(FCenter1);
      AObjectA.Velocity.From(FVelocity1);
      if FDynObject2 <> nil then FDynObject2.Velocity.From(FVelocity2);
   end
 end
#endif /* DOXYGEN_SKIP */
};

        
Boolean Tz3DPhysicsEngine::BSvsBSCollisionTest (const Iz3DScenarioDynamicObject AObjectA ,
const Iz3DScenarioObject AObjectB 
)
{
#ifndef DOXYGEN_SKIP

  // No additional testing needed
  Result:= True;

  if Result then BSvsBSCollisionResponse(AObjectA, AObjectB);
#endif /* DOXYGEN_SKIP */
};


        
Boolean Tz3DPhysicsEngine::TriangleCollisionTest (const Iz3DScenarioDynamicObject AObjectA ,
const Iz3DScenarioObject AObjectB 
)

/*
var
 FVBA, FVBB: Pz3DDynamicModelVertexArray;
    FSVBB: Pz3DStaticModelVertexArray;
    FIBA, FIBB: PWordArray;
    FModelA, FModelB: Iz3DModel;
    FDynamicB: Boolean;
    I, J: Integer;
    FTriA1, FTriA2, FTriA3: Iz3DFloat3;
    FTriB1, FTriB2, FTriB3: Iz3DFloat3;
*/
{
#ifndef DOXYGEN_SKIP


  // Objects must be models to achieve this test
/*  if not z3DSupports(AObjectA, Iz3DModelDynamicInstance) or not
  z3DSupports(AObjectB, Iz3DModelInstance) then*/ begin    Result:= True;
    Exit;
 end

  Result:= False;

  // Get the models vertices (low quality version)
  FModelA:= (AObjectA as Iz3DModelInstance).Model;
  FModelB:= (AObjectB as Iz3DModelInstance).Model;
  FB:= z3DSupports(AObjectB, Iz3DModelInstance);
  FVBA:= FModelA.LockLODVertices(z3dmmlLow, D3DLOCK_READONLY or D3DLOCK_DONOTWAIT);
  FIBA:= FModelA.LockLODIndices(z3dmmlLow, D3DLOCK_READONLY or D3DLOCK_DONOTWAIT);
  if FB then FVBB:= FModelB.LockLODVertices(z3dmmlLow) else
  FSVBB:= FModelB.LockLODVertices(z3dmmlLow, D3DLOCK_READONLY or D3DLOCK_DONOTWAIT);
  FIBB:= FModelB.LockLODIndices(z3dmmlLow, D3DLOCK_READONLY or D3DLOCK_DONOTWAIT);

  FTriA1:= z3DFloat3;
  FTriA2:= z3DFloat3;
  FTriA3:= z3DFloat3;

  FTriB1:= z3DFloat3;
  FTriB2:= z3DFloat3;
  FTriB3:= z3DFloat3;

  try
    for I:= 0 to FModelA.LODFaceCount[z3dmmlLow]-1 dobegin      FTriA1.From(FVBA[FIBA[I*3]].Position);
      FTriA2.From(FVBA[FIBA[I*3+1]].Position);
      FTriA3.From(FVBA[FIBA[I*3+2]].Position);
      for J:= 0 to FModelB.LODFaceCount[z3dmmlLow]-1 dobegin        if FB thenbegin          FTriB1.From(FVBB[FIBB[J*3]].Position);
          FTriB2.From(FVBB[FIBB[J*3+1]].Position);
          FTriB3.From(FVBB[FIBB[J*3+2]].Position);
       endelsebegin          FTriB1.From(FSVBB[FIBB[J*3]].Position) 
          FTriB2.From(FSVBB[FIBB[J*3+1]].Position);
          FTriB3.From(FSVBB[FIBB[J*3+2]].Position);
       end
        if TriangleIntersects(FTriA1, FTriA2, FTriA3, FTriB1, FTriB2, FTriB3) then Result:= True;
        if Result then Break;
     end
      if Result then Break;
   end
  finally
    FModelA.UnlockLODVertices;
    FModelA.UnlockLODIndices;
    FModelB.UnlockLODVertices;
    FModelB.UnlockLODIndices;
 end
#endif /* DOXYGEN_SKIP */
};

        
Boolean Tz3DPhysicsEngine::BSvsBSCollisionResponse (const Iz3DScenarioDynamicObject AObjectA ,
const Iz3DScenarioObject AObjectB 
)

/*
var
 FVelocity1N, FVelocity1T, FVelocity2N, FVelocity2T: Iz3DFloat3;
    FDynObject2: Iz3DScenarioDynamicObject;
    FVelocity1, FVelocity2: Iz3DFloat3;
    ADistance: Iz3DFloat3;
*/
{
#ifndef DOXYGEN_SKIP

  AObjectB.QueryInterface(Iz3DScenarioObject, FDynObject2);
  FVelocity1:= AObjectA.Velocity;
  if FDynObject2 <> nil then FVelocity2:= FDynObject2.Velocity else FVelocity2:= z3DFloat3;
  ADistance:= z3DFloat3.From(AObjectB.Center).Subtract(AObjectA.Center);

  // Measure the velocity
  FVelocity1N:= z3DFloat3.From(ADistance).Scale(AObjectA.Subsets[0].Material.Elasticity * ADistance.Dot(FVelocity1));
  FVelocity1T:= z3DFloat3.From(FVelocity1).Scale(AObjectA.Subsets[0].Material.Elasticity).Subtract(FVelocity1N);
  if FDynObject2 <> nil thenbegin    FVelocity2N:= z3DFloat3.From(ADistance).Scale(AObjectB.Subsets[0].Material.Elasticity * ADistance.Dot(FVelocity2));
    FVelocity2T:= z3DFloat3.From(FVelocity2).Scale(AObjectB.Subsets[0].Material.Elasticity).Subtract(FVelocity2N);
 endelsebegin    FVelocity2N:= z3DFloat3 
    FVelocity2T:= z3DFloat3;
 end

  // Apply the final velocity and restore the center
  AObjectA.Velocity.From(FVelocity1T.Subtract(FVelocity1N.Scale(AObjectA.Subsets[0].Material.Elasticity)).Add(FVelocity2N.Scale(AObjectB.Subsets[0].Material.Elasticity)));
  if FDynObject2 <> nil then FDynObject2.Velocity.From(FVelocity2T.Subtract(FVelocity2N.Scale(AObjectB.Subsets[0].Material.Elasticity)).Add(FVelocity1N.Scale(1 - AObjectA.Subsets[0].Material.Elasticity)));
  AObjectA.Center.Subtract(ADistance.Scale((AObjectA.BoundingSphere.Radius + AObjectB.BoundingSphere.Radius - ADistance.Length + POSITION_BIAS) * 0.5));
  if FDynObject2 <> nil then AObjectB.Center.Subtract(ADistance.Scale((AObjectB.BoundingSphere.Radius + AObjectA.BoundingSphere.Radius - ADistance.Length + POSITION_BIAS) * -0.5));
#endif /* DOXYGEN_SKIP */
};

         
Boolean Tz3DPhysicsEngine::TriangleIntersects (const Iz3DFloat3 A1 ,
const Iz3DFloat3 A2 ,
const Iz3DFloat3 A3 ,
const Iz3DFloat3 B1 ,
const Iz3DFloat3 B2 ,
const Iz3DFloat3 B3 
)

/*
var
 FPlaneA, FPlaneB: Iz3DPlane;
*/
{
#ifndef DOXYGEN_SKIP

  Result:= False;
  FPlaneA:= z3DPlane(A1.x, A2.x, A3.x, A1.x+A2.x);
  FPlaneB:= z3DPlane(B1.x, B2.x, B3.x, B1.x+B2.x);
  Result:= FPlaneA.Intersects(FPlaneB);
  if Result then Exit;
  FPlaneA:= z3DPlane(A1.y, A2.y, A3.y, A1.y+A2.y);
  FPlaneB:= z3DPlane(B1.y, B2.y, B3.y, B1.y+B2.y);
  Result:= FPlaneA.Intersects(FPlaneB);
  if Result then Exit;
  FPlaneA:= z3DPlane(A1.z, A2.z, A3.z, A1.z+A2.z);
  FPlaneB:= z3DPlane(B1.z, B2.z, B3.z, B1.z+B2.z);
  Result:= FPlaneA.Intersects(FPlaneB);
#endif /* DOXYGEN_SKIP */
};

// finished

